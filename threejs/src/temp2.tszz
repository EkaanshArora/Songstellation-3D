// import './style.css'
import SpotifyWebApi from 'spotify-web-api-node';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'
import * as THREE from 'three'
import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';
import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';
import { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js';
import { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry'
import { Font, FontLoader } from 'three/examples/jsm/loaders/FontLoader';
import { Mesh, Object3D, Vector3 } from 'three';
import { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';

const awaitFunc = async () => {
  const ENTIRE_SCENE = 0
  const BLOOM_SCENE = 1;
  const bloomLayer = new THREE.Layers();
			bloomLayer.set( BLOOM_SCENE );
  var spotifyApi = new SpotifyWebApi({});
  const loader = new FontLoader();
  const canvas = document.querySelector('canvas.webgl')
  const scene = new THREE.Scene()
  const urlSearchParams = new URLSearchParams(window.location.search);
  const authQ = urlSearchParams.get('auth')
  const refQ = urlSearchParams.get('ref')
  spotifyApi.setAccessToken(authQ as string);
  spotifyApi.setRefreshToken(refQ as string);
  let trackdata = await spotifyApi.getMyTopTracks({
    time_range: "short_term",
    limit: 10,
    offset: 0
  })
  var tracks = [];
  var artists = [];
  for (var x in trackdata.body.items) {
    var val = trackdata.body.items[x];
    artists.push(val.artists[0].name);
    tracks.push(val.name);
  }
  console.log(tracks, artists)
  const songCount = 10
  const count = 5000

  let songGeo = []
  let songMesh = []
  let textGeo = []
  let textMesh: THREE.Mesh<TextGeometry>[] = []

  const particleGeo = new THREE.BufferGeometry()
  const particleGeoBright = new THREE.BufferGeometry()

  const posArray = new Float32Array(count * 3)
  const posArrayBright = new Float32Array(count * 3)

  for (let i = 0; i < count * 3; i++) {
    posArray[i] = (Math.random() - 0.5) * 7
    posArrayBright[i] = (Math.random() - 0.5) * 7
  }

  particleGeo.setAttribute('position', new THREE.BufferAttribute(posArray, 3))
  particleGeoBright.setAttribute('position', new THREE.BufferAttribute(posArrayBright, 3))

  // Materials

  const material = new THREE.PointsMaterial(
    { size: 0.002, color: 0xffffff }
  )
  const materialBright = new THREE.PointsMaterial(
    { size: 0.008, color: 0xffffff }
  )
  const songMat = new THREE.MeshStandardMaterial(
    { color: 0xff0000, emissive: 0xff9900 }
  )
  const textMat = new THREE.MeshToonMaterial(
    { emissive: 0x777777 }
  )
  const getRandom = () => {
    return (Math.random() - 0.5) * 4
  }

  function loadFont() {
    return new Promise(function (resolve) {
      loader.load('font.json', resolve)
    });
  }

  let font = await loadFont()
  for (let i = 0; i < songCount; i++) {
    let geo = new THREE.SphereGeometry(0.025, 32, 16)
    let textg = new TextGeometry(tracks[i], {
      size: 0.04,
      height: 0.001,
      font: (font as Font),
      curveSegments: 4,
      // bevelEnabled: true,
      // bevelThickness: 0.1,
      // bevelSize: 0.1,
      // bevelOffset: 0,
      // bevelSegments: 5
    });
    textGeo.push(textg)
    songGeo.push(geo)
    let mesh = new THREE.Mesh(geo, songMat)
    textg.computeBoundingBox()
    let size = new Vector3()
    textg.boundingBox?.getSize(size)
    textg.translate(-size.x / 2, -0.1, 0)
    let textm = new THREE.Mesh(textg, textMat)
    let random = [getRandom(), getRandom(), getRandom()]
    mesh.position.set(random[0], random[1], random[2])
    textm.position.set(random[0], random[1], random[2])
    songMesh.push(mesh)
    textMesh.push(textm)
  }

  // Mesh
  const particleMesh = new THREE.Points(particleGeo, material)
  const particleMeshBright = new THREE.Points(particleGeoBright, materialBright)
  scene.add(...textMesh, ...songMesh, particleMeshBright, particleMesh)

  // Lights
  const ambientLight = new THREE.AmbientLight(0xffffff, 10)
  ambientLight.position.x = 0
  ambientLight.position.y = 0
  ambientLight.position.z = 0
  scene.add(ambientLight)

  // Sizes
  const sizes = {
    width: window.innerWidth,
    height: window.innerHeight
  }

  // Base camera
  const camera = new THREE.PerspectiveCamera(60, sizes.width / sizes.height, 0.1, 1000)
  camera.position.z = 4.5
  scene.add(camera)

  // Controls
  const controls = new OrbitControls(camera, (canvas as HTMLCanvasElement))
  controls.enableDamping = true

  function disposeMaterial( obj: any ) {

    if ( obj.material ) {

      obj.material.dispose();

    }

  }
  scene.traverse( disposeMaterial );
  const materials: any = {};
  function darkenNonBloomed( obj: any ) {

    if ( obj.isMesh && bloomLayer.test( obj.layers ) === false ) {

      materials[ obj.uuid ] = obj.material;
      obj.material = textMat;

    }

  }function restoreMaterial( obj: any ) {

    if ( materials[ obj.uuid ] ) {

      obj.material = materials[ obj.uuid ];
      delete materials[ obj.uuid ];

    }

  }
  function renderBloom() {
      scene.traverse( darkenNonBloomed );
      bloomComposer.render();
      scene.traverse( restoreMaterial );
  }
  /**
   * Renderer
   */
  const renderer = new THREE.WebGLRenderer({
    canvas: (canvas as HTMLCanvasElement)
  })
  renderer.toneMapping = THREE.ReinhardToneMapping;
  renderer.setSize(sizes.width, sizes.height)
  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))
  const renderScene = new RenderPass(scene, camera);

  const params = {
    exposure: 1,
    bloomStrength: 2,
    bloomThreshold: 0.3,
    bloomRadius: 0
  };
  const bloomPass = new UnrealBloomPass(new THREE.Vector2(window.innerWidth, window.innerHeight), 1.5, 0.4, 0.85);
  bloomPass.threshold = params.bloomThreshold;
  bloomPass.strength = params.bloomStrength;
  bloomPass.radius = params.bloomRadius;

  // let composer = new EffectComposer(renderer);
  // composer.addPass(renderScene);
  // composer.addPass(bloomPass);
  const bloomComposer = new EffectComposer(renderer);
  bloomComposer.renderToScreen = false;
  bloomComposer.addPass(renderScene);
  bloomComposer.addPass(bloomPass);

  const finalPass = new ShaderPass(
    new THREE.ShaderMaterial( {
      uniforms: {
        baseTexture: { value: null },
        bloomTexture: { value: bloomComposer.renderTarget2.texture }
      },
      defines: {}
    } ), 'baseTexture'
  );

  finalPass.needsSwap = true;
  const finalComposer = new EffectComposer(renderer);
  finalComposer.addPass( renderScene );
  finalComposer.addPass( finalPass );
  camera.layers.set(BLOOM_SCENE);
  bloomComposer.render();
  camera.layers.set(ENTIRE_SCENE);
  finalComposer.render();
  window.addEventListener('resize', () => {
    console.log('!resize')
    sizes.width = window.innerWidth
    sizes.height = window.innerHeight
    bloomPass.setSize(sizes.width, sizes.height)
    camera.aspect = sizes.width / sizes.height
    camera.updateProjectionMatrix()
    renderer.setSize(sizes.width, sizes.height)
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))
  })
  renderBloom()
  const clock = new THREE.Clock()
  let color = new THREE.Color(0)
  let flag = 0
  songMat.emissive = color.set('rgb(255,255,255)')
  const tick = () => {
    const elapsedTime = clock.getElapsedTime()
    particleMesh.rotateY(0.00008)
    particleMeshBright.rotateY(0.00002)
    textMesh.map(e => e.setRotationFromEuler(camera.rotation));
    if (Math.floor(elapsedTime) % 10 !== flag) {
      flag = Math.floor(elapsedTime) % 10
      let r = Math.floor((Math.random() + 0.5) * 255) % 180 + 74
      let g = Math.floor((Math.random() + 0.5) * 255) % 180 + 74
      let b = Math.floor((Math.random() + 0.5) * 255) % 180 + 74
      color.set(`rgb(${Math.floor(r)}, ${Math.floor(g)}, ${Math.floor(b)})`)
    }
    // console.log(Math.floor(elapsedTime))
    songMat.emissive = color
    renderer.render(scene, camera)
    camera.setRotationFromEuler(new THREE.Euler(camera.rotation.x, camera.rotation.y, camera.rotation.z + 0.00005))
    window.requestAnimationFrame(tick)
  }

  tick()
}
awaitFunc()
